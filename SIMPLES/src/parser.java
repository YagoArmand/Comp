
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\021\002\000\002\022\002\000\002\002" +
    "\010\000\002\002\004\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\017" +
    "\003\000\002\017\003\000\002\023\002\000\002\006\010" +
    "\000\002\024\002\000\002\006\006\000\002\025\002\000" +
    "\002\006\006\000\002\026\002\000\002\005\007\000\002" +
    "\027\002\000\002\030\002\000\002\005\010\000\002\031" +
    "\002\000\002\007\006\000\002\032\002\000\002\007\006" +
    "\000\002\020\006\000\002\020\006\000\002\033\002\000" +
    "\002\010\006\000\002\034\002\000\002\010\006\000\002" +
    "\035\002\000\002\011\006\000\002\036\002\000\002\037" +
    "\002\000\002\012\012\000\002\040\002\000\002\013\005" +
    "\000\002\013\002\000\002\041\002\000\002\014\016\000" +
    "\002\042\002\000\002\043\002\000\002\015\011\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\004\000" +
    "\002\016\004\000\002\044\002\000\002\016\006\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\017\005\001\002\000\004\002\177\001" +
    "\002\000\004\020\001\001\002\000\004\020\007\001\002" +
    "\000\026\021\000\022\000\023\000\024\000\025\000\031" +
    "\000\037\000\045\000\047\000\053\000\001\002\000\026" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\031\ufffc\037" +
    "\ufffc\045\ufffc\047\ufffc\053\ufffc\001\002\000\026\021\032" +
    "\022\012\023\026\024\027\025\013\031\030\037\020\045" +
    "\036\047\021\053\022\001\002\000\016\005\044\010\045" +
    "\030\040\047\037\050\041\051\043\001\002\000\004\047" +
    "\ufff1\001\002\000\004\047\162\001\002\000\036\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\031\ufffd\034\ufffd\035" +
    "\ufffd\037\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\053\ufffd" +
    "\001\002\000\036\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\031\ufff7\034\ufff7\035\ufff7\037\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\053\ufff7\001\002\000\040\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\031\ufff3\034\ufff3\035\ufff3" +
    "\036\uffe8\037\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\053" +
    "\ufff3\001\002\000\004\047\142\001\002\000\006\012\103" +
    "\036\136\001\002\000\020\005\044\010\045\030\040\047" +
    "\037\050\041\051\043\052\130\001\002\000\036\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\031\ufff6\034\ufff6\035" +
    "\ufff6\037\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\053\ufff6" +
    "\001\002\000\036\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\031\ufffb\034\ufffb\035\ufffb\037\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\053\ufffb\001\002\000\036\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\031\ufff4\034\ufff4\035\ufff4" +
    "\037\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\053\ufff4\001" +
    "\002\000\020\005\044\010\045\030\040\047\037\050\041" +
    "\051\043\052\122\001\002\000\004\047\ufff2\001\002\000" +
    "\016\005\044\010\045\030\040\047\037\050\041\051\043" +
    "\001\002\000\036\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\031\ufffa\034\ufffa\035\ufffa\037\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\053\ufffa\001\002\000\004\002\uffff\001" +
    "\002\000\036\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\031\ufff5\034\ufff5\035\ufff5\037\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\053\ufff5\001\002\000\036\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\031\ufff9\034\ufff9\035\ufff9\037" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\053\ufff9\001\002" +
    "\000\036\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\031" +
    "\ufff8\034\ufff8\035\ufff8\037\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\053\ufff8\001\002\000\016\005\044\010\045\030" +
    "\040\047\037\050\041\051\043\001\002\000\044\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\011\uffc1\012\103\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\026\uffc1\027\uffc1\032\uffc1\033\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\001\002\000\016\005\044\010" +
    "\045\030\040\047\037\050\041\051\043\001\002\000\042" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\026\uffc0\027\uffc0\032\uffc0\033\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\001\002\000\042\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\026\uffbe\027\uffbe\032\uffbe\033\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\001\002\000\042\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\026" +
    "\uffbf\027\uffbf\032\uffbf\033\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\001\002\000\016\005\044\010\045\030\040\047\037\050" +
    "\041\051\043\001\002\000\016\005\044\010\045\030\040" +
    "\047\037\050\041\051\043\001\002\000\026\004\052\005" +
    "\047\006\055\007\050\014\057\015\051\016\053\026\060" +
    "\027\056\043\uffd1\001\002\000\016\005\044\010\045\030" +
    "\040\047\037\050\041\051\043\001\002\000\016\005\044" +
    "\010\045\030\040\047\037\050\041\051\043\001\002\000" +
    "\016\005\044\010\045\030\040\047\037\050\041\051\043" +
    "\001\002\000\016\005\044\010\045\030\040\047\037\050" +
    "\041\051\043\001\002\000\016\005\044\010\045\030\040" +
    "\047\037\050\041\051\043\001\002\000\004\043\065\001" +
    "\002\000\016\005\044\010\045\030\040\047\037\050\041" +
    "\051\043\001\002\000\016\005\044\010\045\030\040\047" +
    "\037\050\041\051\043\001\002\000\016\005\044\010\045" +
    "\030\040\047\037\050\041\051\043\001\002\000\016\005" +
    "\044\010\045\030\040\047\037\050\041\051\043\001\002" +
    "\000\042\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\026\uffc7\027\uffc7\032\uffc7" +
    "\033\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002\000\042\004" +
    "\052\005\047\006\055\007\050\011\uffca\013\uffca\014\uffca" +
    "\015\051\016\053\026\060\027\056\032\uffca\033\uffca\041" +
    "\uffca\042\uffca\043\uffca\001\002\000\042\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\026\uffc6\027\uffc6\032\uffc6\033\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\001\002\000\042\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\026\060" +
    "\027\056\032\uffcc\033\uffcc\041\uffcc\042\uffcc\043\uffcc\001" +
    "\002\000\026\022\uffd0\023\uffd0\024\uffd0\025\uffd0\031\uffd0" +
    "\037\uffd0\045\uffd0\046\uffd0\047\uffd0\053\uffd0\001\002\000" +
    "\026\022\ufffc\023\ufffc\024\ufffc\025\ufffc\031\ufffc\037\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\053\ufffc\001\002\000\026\022" +
    "\012\023\026\024\027\025\013\031\030\037\020\045\036" +
    "\046\070\047\021\053\022\001\002\000\036\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\031\uffcf\034\uffcf\035\uffcf" +
    "\037\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\053\uffcf\001" +
    "\002\000\042\004\052\005\047\006\055\007\050\011\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\026\060\027\056\032" +
    "\uffc8\033\uffc8\041\uffc8\042\uffc8\043\uffc8\001\002\000\042" +
    "\004\uffce\005\uffce\006\055\007\050\011\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\026\060\027\056\032\uffce\033\uffce" +
    "\041\uffce\042\uffce\043\uffce\001\002\000\042\004\052\005" +
    "\047\006\055\007\050\011\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\026\060\027\056\032\uffc9\033\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\001\002\000\042\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\026" +
    "\060\027\056\032\uffcb\033\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\001\002\000\042\004\uffcd\005\uffcd\006\055\007\050\011" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\026\060\027\056" +
    "\032\uffcd\033\uffcd\041\uffcd\042\uffcd\043\uffcd\001\002\000" +
    "\026\004\052\005\047\006\055\007\050\011\uffc3\014\057" +
    "\015\051\016\053\026\060\027\056\001\002\000\004\011" +
    "\100\001\002\000\042\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\026\uffc2\027" +
    "\uffc2\032\uffc2\033\uffc2\041\uffc2\042\uffc2\043\uffc2\001\002" +
    "\000\042\004\uffc4\005\uffc4\006\055\007\050\011\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\026\060\027\056\032\uffc4" +
    "\033\uffc4\041\uffc4\042\uffc4\043\uffc4\001\002\000\042\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\026\uffc5\027\uffc5\032\uffc5\033\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\001\002\000\016\005\044\010\045" +
    "\030\040\047\037\050\104\051\043\001\002\000\026\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\013\107\014\uffc0\015\uffc0" +
    "\016\uffc0\026\uffc0\027\uffc0\001\002\000\026\004\052\005" +
    "\047\006\055\007\050\013\106\014\057\015\051\016\053" +
    "\026\060\027\056\001\002\000\100\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\053\uffe0\001\002\000\100\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\053\uffe1\001\002\000\026\004\052\005" +
    "\047\006\055\007\050\014\057\015\051\016\053\026\060" +
    "\027\056\033\uffd9\001\002\000\004\033\112\001\002\000" +
    "\030\022\uffd8\023\uffd8\024\uffd8\025\uffd8\031\uffd8\034\uffd8" +
    "\035\uffd8\037\uffd8\045\uffd8\047\uffd8\053\uffd8\001\002\000" +
    "\030\022\ufffc\023\ufffc\024\ufffc\025\ufffc\031\ufffc\034\ufffc" +
    "\035\ufffc\037\ufffc\045\ufffc\047\ufffc\053\ufffc\001\002\000" +
    "\030\022\012\023\026\024\027\025\013\031\030\034\116" +
    "\035\uffd4\037\020\045\036\047\021\053\022\001\002\000" +
    "\004\035\121\001\002\000\026\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\031\uffd6\035\uffd6\037\uffd6\045\uffd6\047\uffd6\053" +
    "\uffd6\001\002\000\026\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\031\ufffc\035\ufffc\037\ufffc\045\ufffc\047\ufffc\053\ufffc\001" +
    "\002\000\026\022\012\023\026\024\027\025\013\031\030" +
    "\035\uffd5\037\020\045\036\047\021\053\022\001\002\000" +
    "\036\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\031\uffd7" +
    "\034\uffd7\035\uffd7\037\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\053\uffd7\001\002\000\004\032\uffe3\001\002\000\026" +
    "\004\052\005\047\006\055\007\050\014\057\015\051\016" +
    "\053\026\060\027\056\032\uffe5\001\002\000\004\032\125" +
    "\001\002\000\036\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\031\uffe4\034\uffe4\035\uffe4\037\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\053\uffe4\001\002\000\004\032\127\001" +
    "\002\000\036\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\031\uffe2\034\uffe2\035\uffe2\037\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\053\uffe2\001\002\000\004\032\uffdf\001\002" +
    "\000\026\004\052\005\047\006\055\007\050\014\057\015" +
    "\051\016\053\026\060\027\056\032\uffdd\001\002\000\004" +
    "\032\133\001\002\000\036\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\031\uffdc\034\uffdc\035\uffdc\037\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\053\uffdc\001\002\000\004\032" +
    "\135\001\002\000\036\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\031\uffde\034\uffde\035\uffde\037\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\053\uffde\001\002\000\016\005\044" +
    "\010\045\030\040\047\037\050\041\051\043\001\002\000" +
    "\026\004\052\005\047\006\055\007\050\014\057\015\051" +
    "\016\053\026\060\027\056\032\uffea\001\002\000\004\032" +
    "\141\001\002\000\036\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\031\uffe9\034\uffe9\035\uffe9\037\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\053\uffe9\001\002\000\004\040\143" +
    "\001\002\000\016\005\044\010\045\030\040\047\037\050" +
    "\041\051\043\001\002\000\026\004\052\005\047\006\055" +
    "\007\050\014\057\015\051\016\053\026\060\027\056\041" +
    "\145\001\002\000\016\005\044\010\045\030\040\047\037" +
    "\050\041\051\043\001\002\000\026\004\052\005\047\006" +
    "\055\007\050\014\057\015\051\016\053\026\060\027\056" +
    "\042\147\001\002\000\016\005\044\010\045\030\040\047" +
    "\037\050\041\051\043\001\002\000\026\004\052\005\047" +
    "\006\055\007\050\014\057\015\051\016\053\026\060\027" +
    "\056\043\151\001\002\000\026\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\031\uffd3\037\uffd3\044\uffd3\045\uffd3\047\uffd3\053" +
    "\uffd3\001\002\000\026\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\031\ufffc\037\ufffc\044\ufffc\045\ufffc\047\ufffc\053\ufffc\001" +
    "\002\000\026\022\012\023\026\024\027\025\013\031\030" +
    "\037\020\044\154\045\036\047\021\053\022\001\002\000" +
    "\036\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\031\uffd2" +
    "\034\uffd2\035\uffd2\037\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\053\uffd2\001\002\000\004\036\156\001\002\000\016" +
    "\005\044\010\045\030\040\047\037\050\041\051\043\001" +
    "\002\000\026\004\052\005\047\006\055\007\050\014\057" +
    "\015\051\016\053\026\060\027\056\032\uffe7\001\002\000" +
    "\004\032\161\001\002\000\036\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\031\uffe6\034\uffe6\035\uffe6\037\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\053\uffe6\001\002\000\010" +
    "\012\103\032\uffee\036\167\001\002\000\004\032\uffec\001" +
    "\002\000\004\032\165\001\002\000\036\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\031\uffeb\034\uffeb\035\uffeb\037" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\053\uffeb\001\002" +
    "\000\004\032\173\001\002\000\016\005\044\010\045\030" +
    "\040\047\037\050\041\051\043\001\002\000\026\004\052" +
    "\005\047\006\055\007\050\014\057\015\051\016\053\026" +
    "\060\027\056\032\ufff0\001\002\000\004\032\172\001\002" +
    "\000\036\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\031" +
    "\uffef\034\uffef\035\uffef\037\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\053\uffef\001\002\000\036\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\031\uffed\034\uffed\035\uffed\037\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\053\uffed\001\002\000" +
    "\026\004\052\005\047\006\055\007\050\014\057\015\051" +
    "\016\053\026\060\027\056\032\uffdb\001\002\000\004\032" +
    "\176\001\002\000\036\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\031\uffda\034\uffda\035\uffda\037\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\053\uffda\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\021\005\001\001\000\002\001\001\000\004\022\007" +
    "\001\001\000\004\003\010\001\001\000\030\004\014\005" +
    "\030\006\023\007\034\010\015\011\033\012\022\014\032" +
    "\015\024\017\013\020\016\001\001\000\006\016\173\020" +
    "\041\001\001\000\002\001\001\000\004\020\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\130" +
    "\020\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\122\020\041\001\001\000\002" +
    "\001\001\000\006\016\107\020\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\045\020\041\001\001\000" +
    "\002\001\001\000\006\016\101\020\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\100\020\041\001\001\000\006\016\075\020\041\001\001" +
    "\000\004\042\053\001\001\000\006\016\074\020\041\001" +
    "\001\000\006\016\073\020\041\001\001\000\006\016\072" +
    "\020\041\001\001\000\006\016\071\020\041\001\001\000" +
    "\006\016\070\020\041\001\001\000\002\001\001\000\006" +
    "\016\063\020\041\001\001\000\006\016\062\020\041\001" +
    "\001\000\006\016\061\020\041\001\001\000\006\016\060" +
    "\020\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\065\001\001" +
    "\000\004\003\066\001\001\000\030\004\014\005\030\006" +
    "\023\007\034\010\015\011\033\012\022\014\032\015\024" +
    "\017\013\020\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\104\020\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\110\001\001\000\002\001\001\000\004\037\112\001" +
    "\001\000\004\003\113\001\001\000\032\004\014\005\030" +
    "\006\023\007\034\010\015\011\033\012\022\013\114\014" +
    "\032\015\024\017\013\020\016\001\001\000\002\001\001" +
    "\000\004\040\116\001\001\000\004\003\117\001\001\000" +
    "\030\004\014\005\030\006\023\007\034\010\015\011\033" +
    "\012\022\014\032\015\024\017\013\020\016\001\001\000" +
    "\002\001\001\000\004\032\125\001\001\000\004\031\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\133\001\001\000\004" +
    "\034\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\136\020\041" +
    "\001\001\000\004\026\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\143\020\041" +
    "\001\001\000\002\001\001\000\006\016\145\020\041\001" +
    "\001\000\002\001\001\000\006\016\147\020\041\001\001" +
    "\000\002\001\001\000\004\041\151\001\001\000\004\003" +
    "\152\001\001\000\030\004\014\005\030\006\023\007\034" +
    "\010\015\011\033\012\022\014\032\015\024\017\013\020" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\156\020\041\001\001\000\004\030\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\165\001\001" +
    "\000\004\025\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\167\020\041\001\001" +
    "\000\004\023\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    class TabelaSimbolo {

       private String tipo;
       private String tam;
       private boolean EhVetor;
      
     
      TabelaSimbolo(String tipo,boolean EhVetor){
          this.tipo = tipo;  
          this.EhVetor = EhVetor;
      }

      TabelaSimbolo(String tipo,boolean EhVetor, String tam){
          this.tipo = tipo;  
          this.EhVetor = EhVetor;
          this.tam = tam;
      }

       public String getTipo(){
          return tipo;
       }

       public boolean getEhVetor() {
          return EhVetor;
       }

       public String getTam() {
          return tam;
       }
  }

  
  private Hashtable<String,TabelaSimbolo> dicionario = new Hashtable<String,TabelaSimbolo>();
  private int pos = 0;
  Stack<String> pilhaAuxiliar = new Stack<String>();
  String v1,v2;

  /* emitir c??digo C */

    public void emit_program(){
       System.out.print("#include <stdio.h>\n");
       System.out.print("#include <stdlib.h>\n");
       System.out.print("\nint main()");
    }

    public void emit_startblock(){
       System.out.print("{");
       format_code(pos++);
       System.out.print("\n");

    }

 
     public void emit_endblock(){
       format_code(--pos);
       System.out.print("}");
       System.out.print("\n");
       
    }

     public void emit_return(){
       format_code(pos); 
       System.out.print("return 0;\n");

    }

    public void emit_semi(){
        System.out.print(";\n");
    }
                                                                
    public void emit_declaracao_variavel_com_atribuicao(String id, String tipo, String value){

       format_code(pos); 

       if(dicionario.containsKey(id)){
        report_fatal_error("Vari??vel duplicada [" + id + "]",null);
       }
        else {  
        if(tipo.equals("INT")) {
            System.out.print("int " + id + "=" + value);
        } else {
            System.out.print("float " + id + "=" + value);
        }

        dicionario.put(id, new TabelaSimbolo(tipo,false));                                  
       }
    }

    public void emit_declaracao_variavel(String id, String tipo){

      format_code(pos); 

      if(dicionario.containsKey(id)){
        report_fatal_error("Vari??vel duplicada [" + id + "]",null);
      } else {  
        if(tipo.equals("INT")) {
            System.out.print("int " + id);
        } else {
            System.out.print("float " + id);
        }

        dicionario.put(id, new TabelaSimbolo(tipo,false));
      }
    }

    public void emit_atribuicao(String id, String value){

        format_code(pos); 

        if(! dicionario.containsKey(id)){
            report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
        }
        System.out.print(id + "=" + value); 
    }

    public void emit_escreva(String id){

        format_code(pos);  

     TabelaSimbolo t1 = dicionario.get(id);  
      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
      }  

      String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
           System.out.print("printf(\"\\n%d\"," + id + ")") ;
         } else {
            System.out.print("printf(\"\\n%f\"," + id + ")") ;
         }   
      }

    public void emit_texto(String t){
        format_code(pos);

        System.out.print("printf(\"%s\"," + t + ")") ;

      }

    public void emit_escreval(String t){
        format_code(pos);

        System.out.print("printf(\"%s\\n\"," + t + ")") ;

      }

    public void emit_escreval_expressao(String id){

        format_code(pos);  

     TabelaSimbolo t1 = dicionario.get(id);  
      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
      }  

      String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
           System.out.print("printf(\"%d\\n\"," + id + ")") ;
         } else {
            System.out.print("printf(\"%f\\n\"," + id + ")") ;
         }   
      }  

    public void emit_leia(String id){

       format_code(pos);   

      TabelaSimbolo t1 = dicionario.get(id);  
      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
      }    

        String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
            System.out.print("scanf(\"%d\",&" + id + ")") ;
         } else {
            System.out.print("scanf(\"%f\",&" + id + ")");
         }   
      }

    public void emit_if(String value){
           format_code(pos); 
           
         System.out.print("if("+ value +")");
    }

    public void emit_else(){

           format_code(pos); 

         System.out.print("else");
    }

    public void emit_for(String id, String n1, String n2, String n3){

      format_code(pos); 
      TabelaSimbolo t1 = dicionario.get(id);

      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
      }

      int passo = Integer.parseInt(n3);

      if (passo >= 0 ){
        System.out.print("for("+ id +" = "+ n1 +";"+ id +" < "+ n2 +";"+ id+ " += "+ n3 +")");
      } else {
        System.out.print("for("+ id +" = "+ n1 +";"+ id +" > "+ n2 +";"+ id+ " += "+ n3 +")");
      }  
      
    }

    public void emit_atribuicao_vetor(String id, String tam, String expressao) {
      format_code(pos);
      checarVariavelNaoDeclarada(id);
      System.out.print(id + "[" + tam + "]" + " = " + expressao);
    }

    public void checarVariavelNaoDeclarada (String id) { 
      if(id.contains("[")){ id = id.substring(0,id.indexOf('[')); }
                 if(! dicionario.containsKey(id)){
                    report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
                 }
    }

    public void emit_declaracao_vetor(String tipo, String id, String tam) {
      format_code(pos);

      if(dicionario.containsKey(id)){
        report_fatal_error("Vari??vel duplicada [" + id + "]", null);
      }

      if(tipo.equals("INT")){
        System.out.print("int " + id + "[" + tam + "]");
      } else {
        System.out.print("float " + id + "[" + tam + "]");
      }

      dicionario.put(id, new TabelaSimbolo(tipo, true, tam));
    }

   public void emit_while(String value){
        format_code(pos); 
         TabelaSimbolo t1 = dicionario.get(value);  
      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + value + "]",null);
      }   
       System.out.print("while("+value+")");
    }

    /* m??todos auxiliares */
     public String checkExpr(String e1, String e2){  
        String tipoE1 = "", tipoE2 = "";  
        String e1aux, e2aux;
        e1aux = e1; e2aux = e2;
     

        if(e1 != null){

          if(e1.contains("[")){ e1 = e1.substring(0,e1.indexOf('[')); }

          checarVariavelNaoDeclarada(e1);
          checarUsoCorretoVetores(e1aux);

           TabelaSimbolo t1 = dicionario.get(e1);  
           if(t1 != null)
              tipoE1 = t1.getTipo();

            if(e2 != null){
               if(e2.contains("[")){ e2 = e2.substring(0,e2.indexOf('[')); }
               checarVariavelNaoDeclarada(e2);
               checarUsoCorretoVetores(e2aux);

               TabelaSimbolo t2 = dicionario.get(e2);  
               if(t2 != null) {
                  tipoE2 = t2.getTipo();
               }

             
            }

        }

        if(! tipoE2.equals("")){

            if(! tipoE1.equals(tipoE2)){
               report_fatal_error("Linguagem n??o permite opera????es com tipos diferentes !",null);
            }
        }

        return tipoE1;
    }

    public void checarUsoCorretoVetores(String id){
      String idaux = id;
 
      if(id.contains("[")){ id = id.substring(0,id.indexOf('[')); }
                 if(! dicionario.containsKey(id)){
                    report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
                 }

      TabelaSimbolo t1 = dicionario.get(id);

     /*   dicionario.forEach((k, v) -> {
             System.out.format("key: %s, value: %s%n", k, v.getEhVetor());
         }); */

      if(t1 != null){
        if(t1.getEhVetor() == true && (! idaux.contains("["))){
             report_fatal_error("Usando vetor sem ??ndice [" + id + "]",null);
        }
      }

    }

     public void format_code(int pos){
       for(int i=0; i < pos * 3; i++){
          System.out.print(" ");  
       }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 emit_program(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_startblock();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM NT$0 STARTPRG NT$1 list_command ENDPRG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_endblock() ;            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_command ::= list_command command 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_command ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // command ::= declare_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= readl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= writel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= writell 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= vetor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= DECLINT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "INT"  ;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= DECLFLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "FLOAT";     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declaracao_variavel_com_atribuicao(id,  t,  value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declare_variable ::= tipo ID ATTRIB expr NT$2 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declaracao_variavel(id,t);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declare_variable ::= tipo ID NT$3 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_declaracao_vetor(t, pilhaAuxiliar.pop(), pilhaAuxiliar.pop()); pilhaAuxiliar.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declare_variable ::= tipo vetor NT$4 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 emit_semi();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_atribuicao(id,value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign ::= ID ATTRIB expr NT$5 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$6 ::= 
            {
              Object RESULT =null;
 v1 = pilhaAuxiliar.pop(); v2 = pilhaAuxiliar.pop(); pilhaAuxiliar.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_atribuicao_vetor(v1, v2, e); pilhaAuxiliar.clear();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign ::= vetor NT$6 ATTRIB expr NT$7 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_escreva(value);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // writel ::= WRITELINE expr NT$8 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$9 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_texto(t);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // writel ::= WRITELINE TEXTO NT$9 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vetor ::= ID LBRCKT INTT RBRCKT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i + "["+z+"]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vetor ::= ID LBRCKT expr RBRCKT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i + "["+z+"]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_escreval(t);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // writell ::= ESCREVAL TEXTO NT$10 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writell",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$11 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_escreval_expressao(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // writell ::= ESCREVAL expr NT$11 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writell",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_leia(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // readl ::= READLINE expr NT$12 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$13 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_if(value);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= IFF expr NT$13 THENN NT$14 list_command elsepart ENDELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 emit_endblock();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$15 ::= 
            {
              Object RESULT =null;
 emit_endblock(); emit_else(); emit_startblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elsepart ::= ELSEE NT$15 list_command 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsepart",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elsepart ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsepart",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$16 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_for(id,n1,n2,n3); emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for ::= PARA ID DE expr ATE expr PASSO expr FACA NT$16 list_command FIMPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  emit_endblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$17 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_while(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // while ::= ENQUANTO expr NT$17 FACA NT$18 list_command FIMENQUANTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  emit_endblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "+" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "-" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "*" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "/" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr EQUALS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "==" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr GREATER expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + ">" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr LESS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "<" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr E expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "&&" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr OU expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "||" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= NAO expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   "!" + e1;    ;                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   "-" + e1;    ;                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$19 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT =  "(" + e1  + ")"; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,null),false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= LPAREN expr NT$19 RPAREN 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;  /* detectar variavel nao declarada */ checkExpr(i,null);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= INTT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("INT",false));               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= FLOATT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("FLOAT",false));             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= vetor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(v, null), true));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
